#pragma once

#include "SplashScreen.h"

#define CRASH_APPLICATION_MACRO _asm _emit 0xFF _asm _emit 0x25 _asm _emit 0x00 _asm _emit 0x00 _asm _emit 0x00 _asm _emit 0x00

enum eClientDisconnectType
{
	CLIENT_DISCONNECT_NONE = 0,
	CLIENT_DISCONNECT_DUMP_DETECTION = 1,
	CLIENT_DISCONNECT_EXECUTABLE_DETECTION = 2,
	CLIENT_DISCONNECT_FILE_DETECTION = 3,
	CLIENT_DISCONNECT_FILE_MAPPING_DETECTION = 4,
	CLIENT_DISCONNECT_LIBRARY_DETECTION = 5,
	CLIENT_DISCONNECT_REGISTRY_DETECTION = 6,
	CLIENT_DISCONNECT_MEMORY_DETECTION = 7,
	CLIENT_DISCONNECT_WINDOW_DETECTION = 8,
	CLIENT_DISCONNECT_MACRO_DETECTION = 9,
	CLIENT_DISCONNECT_DEBUGGER_DETECTION = 10,
};

enum eMemoryGuardNumber
{
	MEMORY_GUARD_NUMBER_NONE = 0,
	MEMORY_GUARD_NUMBER_HANDLE = 1,
	MEMORY_GUARD_NUMBER_INJECT = 2,
};

enum eMacroProtectionNumber
{
	MACRO_PROTECTION_NUMBER_NONE = 0,
	MACRO_PROTECTION_NUMBER_LEVEL1 = 1,
	MACRO_PROTECTION_NUMBER_LEVEL2 = 2,
	MACRO_PROTECTION_NUMBER_LEVEL3 = 3,
	MACRO_PROTECTION_NUMBER_LEVEL4 = 4,
	MACRO_PROTECTION_NUMBER_LEVEL5 = 5,
};

struct PROCESS_CACHE_INFO
{
	DWORD ProcessId;
	DWORD TickCount;
};

void SafeExitProcess();
void SetByte(DWORD offset,BYTE value);
void SetWord(DWORD offset,WORD value);
void SetDword(DWORD offset,DWORD value);
void SetCompleteHook(BYTE head,DWORD offset,...);
void MemoryCpy(DWORD offset,void* value,DWORD size);
void MemorySet(DWORD offset,DWORD value,DWORD size);
void VirtualizeOffset(DWORD offset,DWORD size);
void ErrorMessageBox(char* message,...);
bool DelayMe(DWORD delay,DWORD value);
bool ConvertProcessImageFileNameA(char* path,char* out_path,DWORD out_path_size);
bool ConvertProcessImageFileNameW(wchar_t* path,wchar_t* out_path,DWORD out_path_size);
char* ConvertModuleFileName(char* name);
wchar_t* ConvertModuleFileName(wchar_t* name);
void PacketDecryptData(BYTE* lpMsg,int size,BYTE key);
void PacketEncryptData(BYTE* lpMsg,int size,BYTE key);
bool FileExists(char* filename);
bool FileExists(wchar_t* filename);
void SplashDisplay(LPVOID pParam);
void SplashScreen(CSplash *ClassInst, int SplashType, bool TextSwitch, char DisplayText[255], int CloseTime);
char* GetHardwareId();
char* HardIdParse(char* Input, char Character);
char* GetEncryptedString(int index);
bool SetAdminPrivilege(char* PrivilegeName);

static const BYTE gProtectString[50][256] = {
	{0x72,0x6A,0x7F,0x84,0x8A,0x82,0x7A,0x90,0x9A,0x93,0x84,0x7C,0x60,0x7D,0x85,0x7E,0x99,0x7C,0x88,0x93,0x80,0x7E,0x7D,0x6C,0x47,0x6A,0x7B,0x80,0x84,0x7D,0x93,0x75,0x84,0x99,0x9A,0x80,0x7E,0x7D,0x51,0x47,0x44,0x9A,0x3B,0x47,0x7A,0x90,0x9A,0x93,0x84,0x7C,0x75,0x84,0x99,0x9A,0x80,0x7E,0x7D,0x51,0x47,0x44,0x83,0x3D,0x44,0x83,0x3D,0x44,0x83,0x3B,0x47,0x5C,0x84,0x7C,0x7E,0x99,0x90,0x74,0x9A,0x88,0x86,0x84,0x51,0x47,0x44,0x83,0x3E,0x44,0x83,0x7C,0x89,0x27}, //0 "[CheckSystemInformation] ClientVersion: %s, SystemVersion: %d.%d.%d, MemoryUsage: %d/%dmb"
	{0x72,0x6A,0x6A,0x7E,0x7D,0x7D,0x84,0x8A,0x93,0x80,0x7E,0x7D,0x51,0x51,0x6A,0x7E,0x7D,0x7D,0x84,0x8A,0x93,0x6C,0x47,0x60,0x5D,0x75,0x68,0x5B,0x60,0x63,0x6E,0x7A,0x5E,0x6A,0x62,0x64,0x73,0x27}, //1 "[CConnection::Connect] INVALID_SOCKET"
	{0x72,0x6A,0x6A,0x7E,0x7D,0x7D,0x84,0x8A,0x93,0x80,0x7E,0x7D,0x51,0x51,0x6A,0x7E,0x7D,0x7D,0x84,0x8A,0x93,0x6C,0x47,0x8A,0x7E,0x7D,0x7D,0x84,0x8A,0x93,0x3F,0x40,0x47,0x85,0x88,0x80,0x7B,0x84,0x83,0x47,0x96,0x80,0x93,0x7F,0x47,0x84,0x99,0x99,0x7E,0x99,0x51,0x47,0x44,0x83,0x27}, //2 "[CConnection::Connect] connect() failed with error: %d"
	{0x72,0x6A,0x6A,0x7E,0x7D,0x7D,0x84,0x8A,0x93,0x80,0x7E,0x7D,0x51,0x51,0x6A,0x7E,0x7D,0x7D,0x84,0x8A,0x93,0x6C,0x47,0x76,0x7A,0x68,0x64,0x95,0x84,0x7D,0x93,0x7A,0x84,0x7B,0x84,0x8A,0x93,0x3F,0x40,0x47,0x85,0x88,0x80,0x7B,0x84,0x83,0x47,0x96,0x80,0x93,0x7F,0x47,0x84,0x99,0x99,0x7E,0x99,0x51,0x47,0x44,0x83,0x27}, //3 "[CConnection::Connect] WSAEventSelect() failed with error: %d"
	{0x72,0x6A,0x6A,0x7E,0x7D,0x7D,0x84,0x8A,0x93,0x80,0x7E,0x7D,0x51,0x51,0x63,0x88,0x93,0x88,0x79,0x84,0x8A,0x95,0x6C,0x47,0x99,0x84,0x8A,0x95,0x3F,0x40,0x47,0x85,0x88,0x80,0x7B,0x84,0x83,0x47,0x96,0x80,0x93,0x7F,0x47,0x84,0x99,0x99,0x7E,0x99,0x51,0x47,0x44,0x83,0x27}, //4 "[CConnection::DataRecv] recv() failed with error: %d"
	{0x72,0x6A,0x6A,0x7E,0x7D,0x7D,0x84,0x8A,0x93,0x80,0x7E,0x7D,0x51,0x51,0x63,0x88,0x93,0x88,0x79,0x84,0x8A,0x95,0x6C,0x47,0x77,0x99,0x7E,0x93,0x7E,0x8A,0x7E,0x7B,0x47,0x7F,0x84,0x88,0x83,0x84,0x99,0x47,0x84,0x99,0x99,0x7E,0x99,0x47,0x3F,0x5F,0x84,0x88,0x83,0x84,0x99,0x51,0x47,0x44,0x8F,0x40,0x27}, //5 "[CConnection::DataRecv] Protocol header error (Header: %x)"
	{0x72,0x6A,0x6A,0x7E,0x7D,0x7D,0x84,0x8A,0x93,0x80,0x7E,0x7D,0x51,0x51,0x63,0x88,0x93,0x88,0x79,0x84,0x8A,0x95,0x6C,0x47,0x77,0x99,0x7E,0x93,0x7E,0x8A,0x7E,0x7B,0x47,0x9A,0x80,0x91,0x84,0x47,0x84,0x99,0x99,0x7E,0x99,0x47,0x3F,0x5F,0x84,0x88,0x83,0x84,0x99,0x51,0x47,0x44,0x8F,0x3B,0x47,0x7A,0x80,0x91,0x84,0x51,0x47,0x44,0x83,0x3B,0x47,0x5F,0x84,0x88,0x83,0x51,0x47,0x44,0x8F,0x40,0x27}, //6 "[CConnection::DataRecv] Protocol size error (Header: %x, Size: %d, Head: %x)"
	{0x72,0x6A,0x6A,0x7E,0x7D,0x7D,0x84,0x8A,0x93,0x80,0x7E,0x7D,0x51,0x51,0x63,0x88,0x93,0x88,0x7A,0x84,0x7D,0x83,0x6C,0x47,0x5C,0x88,0x8F,0x47,0x7C,0x9A,0x86,0x47,0x9A,0x80,0x91,0x84,0x47,0x3F,0x73,0x90,0x97,0x84,0x51,0x47,0x58,0x3B,0x47,0x7A,0x80,0x91,0x84,0x51,0x47,0x44,0x83,0x40,0x27}, //7 "[CConnection::DataSend] Max msg size (Type: 1, Size: %d)"
	{0x72,0x6A,0x6A,0x7E,0x7D,0x7D,0x84,0x8A,0x93,0x80,0x7E,0x7D,0x51,0x51,0x63,0x88,0x93,0x88,0x7A,0x84,0x7D,0x83,0x6C,0x47,0x5C,0x88,0x8F,0x47,0x7C,0x9A,0x86,0x47,0x9A,0x80,0x91,0x84,0x47,0x3F,0x73,0x90,0x97,0x84,0x51,0x47,0x59,0x3B,0x47,0x7A,0x80,0x91,0x84,0x51,0x47,0x44,0x83,0x40,0x27}, //8 "[CConnection::DataSend] Max msg size (Type: 2, Size: %d)"
	{0x72,0x6A,0x6A,0x7E,0x7D,0x7D,0x84,0x8A,0x93,0x80,0x7E,0x7D,0x51,0x51,0x63,0x88,0x93,0x88,0x7A,0x84,0x7D,0x83,0x6C,0x47,0x9A,0x84,0x7D,0x83,0x3F,0x40,0x47,0x85,0x88,0x80,0x7B,0x84,0x83,0x47,0x96,0x80,0x93,0x7F,0x47,0x84,0x99,0x99,0x7E,0x99,0x51,0x47,0x44,0x83,0x27}, //9 "[CConnection::DataSend] send() failed with error: %d"
	{0x72,0x6A,0x6A,0x7E,0x7D,0x7D,0x84,0x8A,0x93,0x80,0x7E,0x7D,0x51,0x51,0x63,0x88,0x93,0x88,0x7A,0x84,0x7D,0x83,0x64,0x8F,0x6C,0x47,0x9A,0x84,0x7D,0x83,0x3F,0x40,0x47,0x85,0x88,0x80,0x7B,0x84,0x83,0x47,0x96,0x80,0x93,0x7F,0x47,0x84,0x99,0x99,0x7E,0x99,0x51,0x47,0x44,0x83,0x27}, //10 "[CConnection::DataSendEx] send() failed with error: %d"
	{0x72,0x6A,0x6A,0x7E,0x7D,0x7D,0x84,0x8A,0x93,0x80,0x7E,0x7D,0x51,0x51,0x6A,0x7B,0x80,0x84,0x7D,0x93,0x76,0x7E,0x99,0x82,0x84,0x99,0x73,0x7F,0x99,0x84,0x88,0x83,0x6C,0x47,0x76,0x7A,0x68,0x64,0x7D,0x94,0x7C,0x5D,0x84,0x93,0x96,0x7E,0x99,0x82,0x64,0x95,0x84,0x7D,0x93,0x9A,0x3F,0x40,0x47,0x85,0x88,0x80,0x7B,0x84,0x83,0x47,0x96,0x80,0x93,0x7F,0x47,0x84,0x99,0x99,0x7E,0x99,0x51,0x47,0x44,0x83,0x27}, //11 "[CConnection::ClientWorkerThread] WSAEnumNetworkEvents() failed with error: %d"
	{0x72,0x6A,0x6A,0x7E,0x7D,0x7D,0x84,0x8A,0x93,0x80,0x7E,0x7D,0x51,0x51,0x6A,0x7B,0x80,0x84,0x7D,0x93,0x76,0x7E,0x99,0x82,0x84,0x99,0x73,0x7F,0x99,0x84,0x88,0x83,0x6C,0x47,0x65,0x63,0x6E,0x79,0x64,0x68,0x63,0x47,0x85,0x88,0x80,0x7B,0x84,0x83,0x47,0x96,0x80,0x93,0x7F,0x47,0x84,0x99,0x99,0x7E,0x99,0x51,0x47,0x44,0x83,0x27}, //12 "[CConnection::ClientWorkerThread] FD_READ failed with error: %d"
	{0x72,0x6A,0x6A,0x7E,0x7D,0x7D,0x84,0x8A,0x93,0x80,0x7E,0x7D,0x51,0x51,0x6A,0x7B,0x80,0x84,0x7D,0x93,0x76,0x7E,0x99,0x82,0x84,0x99,0x73,0x7F,0x99,0x84,0x88,0x83,0x6C,0x47,0x65,0x63,0x6E,0x76,0x79,0x60,0x73,0x64,0x47,0x85,0x88,0x80,0x7B,0x84,0x83,0x47,0x96,0x80,0x93,0x7F,0x47,0x84,0x99,0x99,0x7E,0x99,0x51,0x47,0x44,0x83,0x27}, //13 "[CConnection::ClientWorkerThread] FD_WRITE failed with error: %d"
	{0x72,0x6A,0x6A,0x7E,0x7D,0x7D,0x84,0x8A,0x93,0x80,0x7E,0x7D,0x51,0x51,0x6A,0x7B,0x80,0x84,0x7D,0x93,0x76,0x7E,0x99,0x82,0x84,0x99,0x73,0x7F,0x99,0x84,0x88,0x83,0x6C,0x47,0x65,0x63,0x6E,0x6A,0x5B,0x5E,0x7A,0x64,0x47,0x85,0x88,0x80,0x7B,0x84,0x83,0x47,0x96,0x80,0x93,0x7F,0x47,0x84,0x99,0x99,0x7E,0x99,0x51,0x47,0x44,0x83,0x27}, //14 "[CConnection::ClientWorkerThread] FD_CLOSE failed with error: %d"
	{0x72,0x6A,0x7F,0x84,0x8A,0x82,0x63,0x84,0x93,0x7E,0x94,0x99,0x60,0x7D,0x93,0x84,0x86,0x99,0x80,0x93,0x90,0x6C,0x47,0x4A,0x58,0x27}, //15 "[CheckDetourIntegrity] #1"
	{0x72,0x6A,0x7F,0x84,0x8A,0x82,0x63,0x84,0x93,0x7E,0x94,0x99,0x60,0x7D,0x93,0x84,0x86,0x99,0x80,0x93,0x90,0x6C,0x47,0x4A,0x59,0x27}, //16 "[CheckDetourIntegrity] #2"
	{0x72,0x6A,0x7F,0x84,0x8A,0x82,0x63,0x84,0x93,0x7E,0x94,0x99,0x60,0x7D,0x93,0x84,0x86,0x99,0x80,0x93,0x90,0x6C,0x47,0x4A,0x5A,0x27}, //17 "[CheckDetourIntegrity] #3"
	{0x72,0x64,0x7D,0x93,0x99,0x90,0x77,0x99,0x7E,0x8A,0x6C,0x47,0x4A,0x58,0x27}, //18 "[EntryProc] #1"
	{0x72,0x64,0x7D,0x93,0x99,0x90,0x77,0x99,0x7E,0x8A,0x6C,0x47,0x4A,0x59,0x27}, //19 "[EntryProc] #2"
	{0x72,0x64,0x7D,0x93,0x99,0x90,0x77,0x99,0x7E,0x8A,0x6C,0x47,0x4A,0x5A,0x27}, //20 "[EntryProc] #3"
	{0x72,0x64,0x7D,0x93,0x99,0x90,0x77,0x99,0x7E,0x8A,0x6C,0x47,0x4A,0x53,0x27}, //21 "[EntryProc] #4"
	{0x72,0x64,0x7D,0x93,0x99,0x90,0x77,0x99,0x7E,0x8A,0x6C,0x47,0x4A,0x54,0x27}, //22 "[EntryProc] #5"
	{0x72,0x64,0x7D,0x93,0x99,0x90,0x77,0x99,0x7E,0x8A,0x6C,0x47,0x4A,0x55,0x27}, //23 "[EntryProc] #6"
	{0x72,0x64,0x7D,0x93,0x99,0x90,0x77,0x99,0x7E,0x8A,0x6C,0x47,0x63,0x94,0x7C,0x97,0x5B,0x80,0x9A,0x93,0x5C,0x88,0x8F,0x6A,0x7E,0x94,0x7D,0x93,0x51,0x47,0x44,0x83,0x3B,0x47,0x6A,0x7F,0x84,0x8A,0x82,0x9A,0x94,0x7C,0x5B,0x80,0x9A,0x93,0x5C,0x88,0x8F,0x6A,0x7E,0x94,0x7D,0x93,0x51,0x47,0x44,0x83,0x3B,0x47,0x60,0x7D,0x93,0x84,0x99,0x7D,0x88,0x7B,0x5B,0x80,0x9A,0x93,0x5C,0x88,0x8F,0x6A,0x7E,0x94,0x7D,0x93,0x51,0x47,0x44,0x83,0x3B,0x47,0x76,0x80,0x7D,0x83,0x7E,0x96,0x5B,0x80,0x9A,0x93,0x5C,0x88,0x8F,0x6A,0x7E,0x94,0x7D,0x93,0x51,0x47,0x44,0x83,0x27}, //24 "[EntryProc] DumpListMaxCount: %d, ChecksumListMaxCount: %d, InternalListMaxCount: %d, WindowListMaxCount: %d"
	{0x72,0x5F,0x88,0x8A,0x82,0x7A,0x84,0x99,0x95,0x84,0x99,0x77,0x99,0x7E,0x93,0x7E,0x8A,0x7E,0x7B,0x6A,0x7E,0x99,0x84,0x6C,0x47,0x5F,0x84,0x88,0x83,0x51,0x47,0x44,0x83,0x3B,0x47,0x7A,0x80,0x91,0x84,0x51,0x47,0x44,0x83,0x27}, //25 "[HackServerProtocolCore] Head: %d, Size: %d"
	{0x72,0x5F,0x6A,0x6A,0x7B,0x80,0x84,0x7D,0x93,0x60,0x7D,0x85,0x7E,0x79,0x84,0x8A,0x95,0x6C,0x47,0x79,0x84,0x9A,0x94,0x7B,0x93,0x51,0x47,0x44,0x83,0x3B,0x47,0x64,0x7D,0x8A,0x63,0x84,0x8A,0x62,0x84,0x90,0x51,0x47,0x44,0x83,0x47,0x3C,0x47,0x44,0x83,0x3B,0x47,0x60,0x7D,0x93,0x84,0x99,0x7D,0x88,0x7B,0x75,0x84,0x99,0x9A,0x80,0x7E,0x7D,0x51,0x47,0x44,0x83,0x3B,0x47,0x79,0x84,0x8A,0x7E,0x7D,0x7D,0x84,0x8A,0x93,0x51,0x47,0x44,0x83,0x3B,0x47,0x5C,0x84,0x7C,0x7E,0x99,0x90,0x66,0x94,0x88,0x99,0x83,0x51,0x47,0x44,0x83,0x47,0x3C,0x47,0x44,0x83,0x3B,0x47,0x5C,0x88,0x8A,0x99,0x7E,0x77,0x99,0x7E,0x93,0x84,0x8A,0x93,0x51,0x47,0x44,0x83,0x47,0x3C,0x47,0x44,0x83,0x3B,0x47,0x5C,0x84,0x7C,0x7E,0x99,0x90,0x68,0x83,0x83,0x99,0x84,0x9A,0x9A,0x51,0x47,0x44,0x6F,0x47,0x3C,0x47,0x44,0x6F,0x47,0x3C,0x47,0x44,0x6F,0x47,0x3C,0x47,0x44,0x6F,0x47,0x3C,0x47,0x44,0x6F,0x47,0x3C,0x47,0x44,0x6F,0x47,0x3C,0x47,0x44,0x6F,0x47,0x3C,0x47,0x44,0x6F,0x27}, //26 "[HCClientInfoRecv] Result: %d, EncDecKey: %d - %d, InternalVersion: %d, Reconnect: %d, MemoryGuard: %d - %d, MacroProtect: %d - %d, MemoryAddress: %X - %X - %X - %X - %X - %X - %X - %X"
	{0x72,0x5F,0x6A,0x63,0x94,0x7C,0x97,0x5B,0x80,0x9A,0x93,0x79,0x84,0x8A,0x95,0x6C,0x47,0x6A,0x7E,0x94,0x7D,0x93,0x51,0x47,0x44,0x83,0x3B,0x47,0x5C,0x88,0x8F,0x6A,0x7E,0x94,0x7D,0x93,0x51,0x47,0x44,0x83,0x27}, //27 "[HCDumpListRecv] Count: %d, MaxCount: %d"
	{0x72,0x5F,0x6A,0x6A,0x7F,0x84,0x8A,0x82,0x9A,0x94,0x7C,0x5B,0x80,0x9A,0x93,0x79,0x84,0x8A,0x95,0x6C,0x47,0x6A,0x7E,0x94,0x7D,0x93,0x51,0x47,0x44,0x83,0x3B,0x47,0x5C,0x88,0x8F,0x6A,0x7E,0x94,0x7D,0x93,0x51,0x47,0x44,0x83,0x27}, //28 "[HCChecksumListRecv] Count: %d, MaxCount: %d"
	{0x72,0x5F,0x6A,0x60,0x7D,0x93,0x84,0x99,0x7D,0x88,0x7B,0x5B,0x80,0x9A,0x93,0x79,0x84,0x8A,0x95,0x6C,0x47,0x6A,0x7E,0x94,0x7D,0x93,0x51,0x47,0x44,0x83,0x3B,0x47,0x5C,0x88,0x8F,0x6A,0x7E,0x94,0x7D,0x93,0x51,0x47,0x44,0x83,0x27}, //29 "[HCInternalListRecv] Count: %d, MaxCount: %d"
	{0x72,0x5F,0x6A,0x6A,0x7B,0x80,0x84,0x7D,0x93,0x63,0x80,0x9A,0x8A,0x7E,0x7D,0x7D,0x84,0x8A,0x93,0x79,0x84,0x8A,0x95,0x6C,0x47,0x73,0x90,0x97,0x84,0x51,0x47,0x44,0x83,0x27}, //30 "[HCClientDisconnectRecv] Type: %d"
	{0x72,0x6A,0x5F,0x6A,0x7B,0x80,0x84,0x7D,0x93,0x60,0x7D,0x85,0x7E,0x7A,0x84,0x7D,0x83,0x6C,0x47,0x60,0x9A,0x79,0x84,0x8A,0x7E,0x7D,0x7D,0x84,0x8A,0x93,0x51,0x47,0x44,0x83,0x3B,0x47,0x6A,0x7B,0x80,0x84,0x7D,0x93,0x65,0x80,0x7B,0x84,0x6A,0x79,0x6A,0x51,0x47,0x44,0x6F,0x3B,0x47,0x5F,0x88,0x8A,0x82,0x75,0x84,0x99,0x9A,0x80,0x7E,0x7D,0x51,0x47,0x44,0x9A,0x3B,0x47,0x5F,0x88,0x99,0x83,0x96,0x88,0x99,0x84,0x60,0x83,0x51,0x47,0x44,0x9A,0x27}, //31 "[CHClientInfoSend] IsReconnect: %d, ClientFileCRC: %X, HackVersion: %s, HardwareId: %s"
	{0x72,0x6A,0x5F,0x6A,0x7B,0x80,0x84,0x7D,0x93,0x63,0x80,0x9A,0x8A,0x7E,0x7D,0x7D,0x84,0x8A,0x93,0x7A,0x84,0x7D,0x83,0x6C,0x47,0x73,0x90,0x97,0x84,0x51,0x47,0x44,0x83,0x3B,0x47,0x68,0x8A,0x8A,0x7E,0x94,0x7D,0x93,0x51,0x47,0x44,0x9A,0x3B,0x47,0x5D,0x88,0x7C,0x84,0x51,0x47,0x44,0x9A,0x3B,0x47,0x6A,0x88,0x97,0x93,0x80,0x7E,0x7D,0x5D,0x88,0x7C,0x84,0x51,0x47,0x44,0x9A,0x3B,0x47,0x77,0x99,0x7E,0x8A,0x84,0x9A,0x9A,0x5D,0x88,0x7C,0x84,0x51,0x47,0x44,0x9A,0x27}, //32 "[CHClientDisconnectSend] Type: %d, Account: %s, Name: %s, CaptionName: %s, ProcessName: %s"
	{0x72,0x6A,0x7F,0x84,0x8A,0x82,0x6A,0x7B,0x80,0x84,0x7D,0x93,0x65,0x80,0x7B,0x84,0x6C,0x47,0x4A,0x58,0x27}, //33 "[CheckClientFile] #1"
	{0x72,0x6A,0x7F,0x84,0x8A,0x82,0x6A,0x7B,0x80,0x84,0x7D,0x93,0x65,0x80,0x7B,0x84,0x6C,0x47,0x4A,0x59,0x27}, //34 "[CheckClientFile] #2"
	{0x72,0x6A,0x7F,0x84,0x8A,0x82,0x6A,0x7B,0x80,0x84,0x7D,0x93,0x65,0x80,0x7B,0x84,0x6C,0x47,0x4A,0x5A,0x27}, //35 "[CheckClientFile] #3"
	{0x72,0x6A,0x7F,0x84,0x8A,0x82,0x6A,0x7B,0x80,0x84,0x7D,0x93,0x65,0x80,0x7B,0x84,0x6C,0x47,0x4A,0x53,0x27}, //36 "[CheckClientFile] #4"
	{0x72,0x6A,0x7F,0x84,0x8A,0x82,0x77,0x7B,0x94,0x86,0x80,0x7D,0x65,0x80,0x7B,0x84,0x6C,0x47,0x4A,0x58,0x27}, //37 "[CheckPluginFile] #1"
	{0x72,0x6A,0x7F,0x84,0x8A,0x82,0x77,0x7B,0x94,0x86,0x80,0x7D,0x65,0x80,0x7B,0x84,0x6C,0x47,0x4A,0x59,0x27}, //38 "[CheckPluginFile] #2"
	{0x72,0x6A,0x7F,0x84,0x8A,0x82,0x77,0x7B,0x94,0x86,0x80,0x7D,0x65,0x80,0x7B,0x84,0x6C,0x47,0x4A,0x5A,0x27}, //39 "[CheckPluginFile] #3"
	{0x72,0x6A,0x7F,0x84,0x8A,0x82,0x75,0x84,0x99,0x80,0x85,0x90,0x65,0x80,0x7B,0x84,0x6C,0x47,0x4A,0x58,0x27}, //40 "[CheckVerifyFile] #1"
	{0x72,0x6A,0x7F,0x84,0x8A,0x82,0x75,0x84,0x99,0x80,0x85,0x90,0x65,0x80,0x7B,0x84,0x6C,0x47,0x4A,0x59,0x27}, //41 "[CheckVerifyFile] #2"
	{0x72,0x7A,0x97,0x7B,0x88,0x9A,0x7F,0x7A,0x8A,0x99,0x84,0x84,0x7D,0x6C,0x47,0x7A,0x97,0x7B,0x88,0x9A,0x7F,0x73,0x90,0x97,0x84,0x51,0x47,0x44,0x83,0x3B,0x47,0x73,0x84,0x8F,0x93,0x7A,0x96,0x80,0x93,0x8A,0x7F,0x51,0x47,0x44,0x83,0x3B,0x47,0x63,0x80,0x9A,0x97,0x7B,0x88,0x90,0x73,0x84,0x8F,0x93,0x51,0x47,0x44,0x9A,0x27}, //42 "[SplashScreen] SplashType: %d, TextSwitch: %d, DisplayText: %s"
	{0x72,0x5F,0x6A,0x76,0x80,0x7D,0x83,0x7E,0x96,0x5B,0x80,0x9A,0x93,0x79,0x84,0x8A,0x95,0x6C,0x47,0x6A,0x7E,0x94,0x7D,0x93,0x51,0x47,0x44,0x83,0x3B,0x47,0x5C,0x88,0x8F,0x6A,0x7E,0x94,0x7D,0x93,0x51,0x47,0x44,0x83,0x27}, //43 "[HCWindowListRecv] Count: %d, MaxCount: %d"
	{0x72,0x64,0x7D,0x93,0x99,0x90,0x77,0x99,0x7E,0x8A,0x6C,0x47,0x60,0x7D,0x80,0x93,0x80,0x88,0x7B,0x80,0x91,0x88,0x93,0x80,0x7E,0x7D,0x47,0x9A,0x94,0x8A,0x8A,0x84,0x9A,0x9A,0x85,0x94,0x7B,0x27}, //44 "[EntryProc] Initialization successful"
	{0x72,0x64,0x7D,0x93,0x99,0x90,0x77,0x99,0x7E,0x8A,0x6C,0x47,0x4A,0x56,0x27}, //45 "[EntryProc] #7"
	{0x72,0x64,0x7D,0x93,0x99,0x90,0x77,0x99,0x7E,0x8A,0x6C,0x47,0x4A,0x4F,0x27}, //46 "[EntryProc] #8"
};
